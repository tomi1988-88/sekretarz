from tkinter import *
from tkinter import ttk


class Sketchpad(Canvas):
    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)
        self.bind("<Button-1>", self.save_posn)
        self.bind("<B1-Motion>", self.add_contour)
        # self.bind("<ButtonRelease-1>", self.release)

        self.bind("<ButtonRelease-1>", self.add_rectangle)

        self.contour = self.create_rectangle(0, 0, 1, 1)

    def save_posn(self, event):
        self.lastx, self.lasty = event.x, event.y
        print(self.lastx, self.lasty)

    def add_line(self, event):
        self.create_line((self.lastx, self.lasty, event.x, event.y))
        self.save_posn(event)

    def add_rectangle(self, event):
        self.create_rectangle(self.lastx, self.lasty, event.x, event.y, fill='red', outline='blue')
        print(f"BTN realesed {event.x} , {event.y}")

    def add_contour(self, event):
        self.delete(self.contour)
        self.contour = self.create_rectangle(self.lastx, self.lasty, event.x, event.y, outline='blue')

    def release(self, event):
        print(f"BTN realesed {event.x} , {event.y}")

    def pressed(self, event):
        print(f"BTN pressed {event.x} , {event.y}")


root = Tk()
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)

sketch = Sketchpad(root)
sketch.grid(column=0, row=0, sticky=NSEW)

root.mainloop()

############
import tkinter as tk
from tkinter import ttk
import customtkinter as ctk
from PIL import Image, ImageTk


class FrameZoom(ttk.Frame):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        self.columnconfigure(0, weight=1)
        self.columnconfigure(1, weight=0)

        self.rowconfigure(0, weight=1)
        self.rowconfigure(1, weight=0)

        self.canvas = tk.Canvas(master=self, )
        self.canvas.grid(row=0, column=0, sticky=tk.NSEW)

        self.vbar = ttk.Scrollbar(master=self, orient='vertical', command=self.canvas.yview)
        self.hbar = ttk.Scrollbar(master=self, orient='horizontal', command=self.canvas.xview)
        self.vbar.grid(row=0, column=1, sticky='ns')
        self.hbar.grid(row=1, column=0, sticky='we')

        self.canvas.configure(xscrollcommand=self.hbar.set, yscrollcommand=self.vbar.set)

        self.photo = Image.open(r"U:\DOZIK\WSPOLNE_DOIK\DOZIK-1\TOMASZ SASIAK\AUCHAN WIH\Auchan_20.07.23_Pułaskiego60_wiih_Katowice\Auchan_wiih_katowice_produkt_1_regał.jpg")

        self.photo_temp = self.photo.copy()  # a variable instantiated to prevent quality loose while zooming (resizeing)
        self.img_width, self.img_height = self.photo.size
        self.scale = 1.0  # original scale

        canvas_width = 400  # an arbitrary factor - todo: nie wiem czy da się zebrać w __init__ szerokość wigeta
                                # chodzi o to, żeby obrazek był mieścił się w szerokości okienka (użytkownik nie musi zoom outować)
        self.scale *= canvas_width / self.img_width

        self.photo_temp = self.photo.resize(
            (
                int(self.img_width * self.scale),
                int(self.img_height * self.scale)
            )
        )

        self.photo_tk = ImageTk.PhotoImage(self.photo_temp)
        self.canvas.create_image(0, 0, image=self.photo_tk)

        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

        self.canvas.bind('<ButtonPress-1>', self.move_from)
        self.canvas.bind('<B1-Motion>', self.move_to)
        self.canvas.bind('<ButtonPress-3>', self.rotate_img)
        self.canvas.bind('<MouseWheel>', self.wheel)  # with Windows and MacOS, but not Linux
        self.canvas.bind('<Button-5>', self.wheel)  # only with Linux, wheel scroll down
        self.canvas.bind('<Button-4>', self.wheel)

        self.flag = 1
        self.contour = self.canvas.create_rectangle(0, 0, 1, 1)

    def move_from(self, event):
        self.canvas.scan_mark(event.x, event.y)

    def move_to(self, event):
        self.canvas.scan_dragto(event.x, event.y, gain=1)

    def rotate_img(self, event):
        self.photo = self.photo.rotate(90, expand=True)

        self.img_width, self.img_height = self.img_height, self.img_width

        self.photo_temp = self.photo.resize(
            (
                int(self.img_width * self.scale),
                int(self.img_height * self.scale)
            )
        )

        self.photo_tk = ImageTk.PhotoImage(self.photo_temp)
        self.canvas.delete("all")

        self.canvas.create_image(0, 0, image=self.photo_tk)
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def zoom_in(self):
        self.scale *= 1.3

        self.photo_temp = self.photo.resize(
            (
                int(self.img_width * self.scale),
                int(self.img_height * self.scale)
            )
        )

        self.photo_tk = ImageTk.PhotoImage(self.photo_temp)
        self.canvas.delete("all")

        self.canvas.create_image(0, 0, image=self.photo_tk)
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def zoom_out(self):
        self.scale *= 0.8

        self.photo_temp = self.photo.resize(
            (
                int(self.img_width * self.scale),
                int(self.img_height * self.scale)
            )
        )

        self.photo_tk = ImageTk.PhotoImage(self.photo_temp)
        self.canvas.delete("all")

        self.canvas.create_image(0, 0, image=self.photo_tk)
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def wheel(self, event):
        if event.num == 5 or event.delta == -120:  # Respond to Linux (event.num) or Windows (event.delta) wheel event
            self.zoom_out()
        elif event.num == 4 or event.delta == 120:  # event.num == 4 or event.delta == 120
            self.zoom_in()

    def set_flag(self):
        self.flag = 0 if self.flag else 1
        if self.flag:
            self.canvas.bind('<ButtonPress-1>', self.move_from)
            self.canvas.bind('<B1-Motion>', self.move_to)
            self.canvas.unbind("<ButtonRelease-1>")
        else:
            self.canvas.bind("<ButtonPress-1>", self.save_posn)
            self.canvas.bind("<B1-Motion>", self.add_contour)
            self.canvas.bind("<ButtonRelease-1>", self.add_rectangle)

    def save_posn(self, event):
        self.lastx, self.lasty = event.x, event.y
        print(self.lastx, self.lasty)

    def add_rectangle(self, event):  # todo: nie wiem dlaczego rysuje ramkę na prawo poniżej kursora
        self.canvas.create_rectangle(self.lastx, self.lasty, event.x, event.y, fill='red', outline='blue')
        print(f"BTN realesed {event.x} , {event.y}")

    def add_contour(self, event):
        self.canvas.delete(self.contour)
        self.contour = self.canvas.create_rectangle(self.lastx, self.lasty, event.x, event.y, outline='blue')


root = tk.Tk()
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)
root.rowconfigure(1, weight=0)
root.rowconfigure(2, weight=0)
root.rowconfigure(3, weight=0)
root.rowconfigure(4, weight=0)

x = FrameZoom(master=root)
x.grid(row=0, column=0, sticky=tk.NSEW)

ttk.Button(master=root, text="rotate", command=lambda y=None: x.rotate_img(y)).grid(row=1, column=0)
ttk.Button(master=root, text="zoom in", command=x.zoom_in).grid(row=2, column=0)
ttk.Button(master=root, text="zoom out", command=x.zoom_out).grid(row=3, column=0)
ttk.Button(master=root, text="mouse move/mouse draw", command=x.set_flag).grid(row=4, column=0)


root.mainloop()



# from PIL import Image
# import webbrowser
# image = Image.open(r"U:\DOZIK\WSPOLNE_DOIK\DOZIK-1\TOMASZ SASIAK\AUCHAN WIH\Auchan_20.07.23_Pułaskiego60_wiih_Katowice\Auchan_wiih_katowice_produkt_1_regał.jpg")
#
# webbrowser.open(r"U:\DOZIK\WSPOLNE_DOIK\DOZIK-1\TOMASZ SASIAK\AUCHAN WIH\Auchan_20.07.23_Pułaskiego60_wiih_Katowice\Auchan_wiih_katowice_produkt_1_regał.jpg")
#
# # rotate 270 degrees counter-clockwise
# # imRotate = image.rotate(90, expand=True)
# # filename = "Rotated22.jpg"
# # imRotate.save(filename)
# width, height = image.size
#
# imResized = image.resize((int(width * 1.3), int(height * 1.3)))
#
# filename = "Resized2.jpg"
# imResized.save(filename)
# # a simple way to show the image file is to use module webbrowser
# # which activates the default viewer associated with the image
# # works with Windows and Linux
#
# webbrowser.open(filename)
